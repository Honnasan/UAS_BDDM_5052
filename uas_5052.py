# -*- coding: utf-8 -*-
"""UAS_5052.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A2tLxTxcgKEOHf1_-0WMOJ2vRf_GlC1t

## Introduction
In this notebook, we will explore a dataset that provides insights into workplace stress. The dataset includes various features such as age, gender, job role, salary, working hours, and stress levels, among others. Our goal is to analyze these features to understand the factors contributing to stress and potentially build a predictive model to estimate stress levels based on other variables.
"""

# Commented out IPython magic to ensure Python compatibility.
# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import warnings
warnings.filterwarnings('ignore')

# Ensure inline plotting
# %matplotlib inline

"""## Data Loading and Overview"""

# Load the dataset
file_path = '/content/corporate_stress_dataset.csv'
df = pd.read_csv(file_path)

# Display the first few rows of the dataset
df.head()

"""## Data Cleaning and Preprocessing"""

# Check for missing values
df.isnull().sum()

# Handle missing values
df.fillna(method='ffill', inplace=True)
df.isnull().sum()

# Convert categorical variables to numerical using one-hot encoding
df = pd.get_dummies(df, columns=['Gender', 'Marital_Status', 'Job_Role', 'Health_Issues', 'Company_Size', 'Department', 'Burnout_Symptoms', 'Location'], drop_first=True)

# Display the updated dataframe
df.head()

"""## Exploratory Data Analysis (EDA)"""

# Correlation heatmap
numeric_df = df.select_dtypes(include=[np.number])
plt.figure(figsize=(12, 8))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Pair plot for selected features
sns.pairplot(df, vars=['Age', 'Experience_Years', 'Monthly_Salary_INR', 'Stress_Level'], hue='Remote_Work')
plt.show()

# Distribution of stress levels
sns.countplot(x='Stress_Level', data=df)
plt.title('Distribution of Stress Levels')
plt.show()

"""## Featur Selection"""

X = df.drop('Age', axis=1, errors='ignore')
y = df['Age']

# SelectKBest with ANOVA F-value
select_k = SelectKBest(score_func=f_classif, k='all')
X_new = select_k.fit_transform(X, y)
scores = select_k.scores_

# Plot feature scores
plt.figure(figsize=(10, 6))
plt.bar(X.columns, scores)
plt.xticks(rotation=90)
plt.title("Feature Importance Based on ANOVA F-value")
plt.show()

"""## Predictive Modeling"""

# Modeling
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

"""## Model Evaluation"""

#Model Evaluation
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))

# Cross-validation
cv_scores = cross_val_score(model, X, y, cv=5)
print("\nCross-validation scores:", cv_scores)
print("Mean CV score:", np.mean(cv_scores))

"""## Analisa dan Pemahasan

**Evaluasi Model**

Bagian evaluasi model menunjukkan dua metrik utama:

1. Classification Report: Memberikan rincian presisi, recall, F1-score, dan dukungan untuk setiap kelas (usia dalam kasus ini). Hal ini membantu memahami kinerja model di seluruh kelas yang berbeda.
2. Accuracy Score: Mengukur proporsi prediksi yang benar dari total prediksi. Ini memberikan gambaran umum tentang seberapa baik model melakukan klasifikasi.
<br>
Selain itu, evaluasi juga mencakup:

3. Cross-validation scores: Memberikan akurasi model pada lipatan data yang berbeda. Hal ini membantu dalam menilai seberapa baik model melakukan generalisasi pada data yang tidak terlihat.
4. Mean CV score: Rata-rata skor validasi silang, yang memberikan ukuran kinerja model yang lebih kuat.
<br>
**Alasan Hasil**

Beberapa faktor dapat berkontribusi pada hasil yang diamati pada bagian evaluasi model:

1. Pilihan Model: Random Forest Classifier umumnya merupakan model yang kuat, dan cocok untuk berbagai tugas klasifikasi. Kinerja yang baik dapat dikaitkan dengan kemampuannya untuk menangani data dimensi tinggi dan non-linieritas.
2. Pemilihan Fitur: Proses pemilihan fitur menggunakan SelectKBest dengan ANOVA F-value membantu dalam memilih fitur yang paling relevan untuk prediksi usia. Hal ini dapat meningkatkan kinerja model dengan mengurangi noise dan meningkatkan generalisasi.
3. Pra-pemrosesan Data: Menerapkan StandardScaler untuk menstandarisasi fitur numerik memastikan bahwa fitur-fitur tersebut berada pada skala yang sama, yang dapat meningkatkan kinerja model, terutama untuk algoritma yang sensitif terhadap skala fitur.
4. Data dan Ukuran Dataset: Kualitas dan ukuran dataset secara signifikan memengaruhi kinerja model. Dataset yang lebih besar dan representatif cenderung menghasilkan model yang lebih akurat.
5. Hiperparameter Model: Random Forest Classifier memiliki beberapa hiperparameter yang dapat disetel untuk mengoptimalkan kinerjanya. Pilihan default hiperparameter mungkin tidak selalu optimal, dan penyetelan hiperparameter lebih lanjut dapat menghasilkan peningkatan kinerja.
<br>
**Analisis Lebih Lanjut**

Untuk memahami lebih lanjut hasil dan potensi perbaikan, pertimbangkan hal berikut:

1. Menyelidiki Classification Report untuk kelas-kelas dengan performa buruk dan mengidentifikasi potensi penyebab kesalahan klasifikasi.
2. Melakukan penyetelan hiperparameter pada Random Forest Classifier untuk menemukan pengaturan optimal untuk dataset.
3. Menjelajahi model atau teknik pembelajaran mesin alternatif untuk membandingkan kinerjanya dengan Random Forest Classifier.
4. Menilai dampak pemilihan fitur pada kinerja model dengan bereksperimen dengan kombinasi fitur yang berbeda.
5. Mengumpulkan lebih banyak data, jika memungkinkan, untuk meningkatkan ukuran dan representasi dataset.
<br>
Dengan mengatasi area-area ini, Anda dapat lebih memahami model dan berpotensi meningkatkan kinerjanya lebih lanjut.
"""